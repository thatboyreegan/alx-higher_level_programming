   Test file for 1-my_list.py
=================================

usage:
======

importing the class:
    >>> MyList = __import__('1-my_list').MyList

Test for appending to the list

    >>> my_list = MyList()
    >>> my_list.append(5)
    >>> my_list.append(4)
    >>> my_list.append(6)
    >>> my_list.append(9)
    >>> my_list.append(0)
    >>> print(my_list)
    [5, 4, 6, 9, 0]

Test prinnt sorted list

    >>> my_list.print_sorted()
    [0, 4, 5, 6, 9]

Test printing the list without sorting

    >>> print(my_list)
    [5, 4, 6, 9, 0]

Test negative numbers

    >>> my_list.clear()
    >>> my_list.append(-3)
    >>> my_list.append(-7)
    >>> my_list.append(-4)
    >>> my_list.append(-8)
    >>> my_list.append(-1)
    >>> print(my_list)
    [-3, -7, -4, -8, -1]

    >>> my_list.print_sorted()
    [-1, -3, -4, -7, -8]

Test with floating points

    >>> my_list.clear()
    >>> my_list.append(4.7)
    >>> my_list.append(5.6)
    >>> my_list.append(8.7)
    >>> my_list.append(0.8)
    >>> my_list.append(-9.4)
    >>> print(my_list)
    [4.7, 5.6, 8.7, 0.8, -9.4]

    >>> my_list.print_sorted()
    [-9.4, 0.8, 4.7, 5.6, 8.7]

Test empty list

    >>> my_list.clear()
    >>> print(my_list)
    []
    >>> my_list.print_sorted()
    []

    >>> my_list = MyList([])
    >>> print(my_list)
    []
    >>> my_list.print_sorted()
    []

Test list is an instance of the  MyList class:

    >>> my_list = MyList([9, 3, 5, 2, 5, 7])
    >>> my_list.print_sorted()
    [2, 3, 5, 5, 7, 9]
    >>> print(my_list)
    [9, 3, 5, 2, 5, 7]

Test list is not instance of class MyList:

    >>> my_list = [9, 3, 5, 2, 5, 7]
    >>> my_list.print_sorted()
    Traceback (most recent call last):
        ...
    AttributeError: 'list' object has no attribute 'print_sorted'

Test for giving a parameter to print_sorted when called from the obj:

    >>> my_list.print_sorted(my_list)
    Traceback (most recent call last):
        ...
    TypeError: MyList.print_sorted() takes 1 positional argument but 2 were given